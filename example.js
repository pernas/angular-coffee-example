// Generated by CoffeeScript 1.9.1
(function() {
  'use strict';
  var Just, Nothing, _bind, _unit;

  _bind = function(f) {
    switch (this) {
      case Nothing:
        return Nothing;
      default:
        return f(this.val);
    }
  };

  _unit = function(input) {
    return Object.freeze({
      val: input != null ? input : null,
      bind: _bind
    });
  };

  Nothing = _unit(null);

  Just = function(input) {
    if (input != null) {
      return _unit(input);
    } else {
      return Nothing;
    }
  };

  angular.module('pernas.example', []).directive('example', [
    'EntropyService', function(EntropyService) {
      return {
        restrict: 'E',
        template: 'Hola {{nom}}, com va? tens {{punts}} punts',
        controller: [
          '$scope', function($scope) {
            $scope.name = "Jaume";
            $scope.MaybeName = Just("Enric");
            $scope.nom = $scope.MaybeName.val;
            $scope.entropy = EntropyService.entropy;
            return $scope.punts = $scope.entropy($scope.nom);
          }
        ]
      };
    }
  ]).factory('EntropyService', function() {
    var H, badPatterns, hasLowerCase, hasNumbers, hasPunctuation, hasUpperCase, password;
    H = 0;
    password = '';
    hasLowerCase = function(str) {
      return /[a-z]/.test(str);
    };
    hasUpperCase = function(str) {
      return /[A-Z]/.test(str);
    };
    hasNumbers = function(str) {
      return /[0-9]/.test(str);
    };
    hasPunctuation = function(str) {
      return /[-!$%^&*()_+|~=`{}\[\]:";'<>?,.\/]/.test(str);
    };
    badPatterns = function(pass, H) {
      var entropy, patterns;
      patterns = [/^\d+$/, /^[a-z]+\d$/, /^[A-Z]+\d$/, /^[a-zA-Z]+\d$/, /^[a-z]+\d+$/, /^[a-z]+$/, /^[A-Z]+$/, /^[A-Z][a-z]+$/, /^[A-Z][a-z]+\d$/, /^[A-Z][a-z]+\d+$/, /^[a-z]+[._!\- @*#]$/, /^[A-Z]+[._!\- @*#]$/, /^[a-zA-Z]+[._!\- @*#]$/, /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]+$/, /^[a-z\-ZA-Z0-9.-]+$/];
      entropy = H;
      angular.forEach(patterns, function(pattern) {
        if (pattern.test(pass)) {
          entropy = entropy / 2;
        }
      });
      return entropy;
    };
    return {
      entropy: function(pass) {
        var base;
        if (angular.isUndefined(pass)) {
          H = 0;
          password = '';
        } else {
          if (pass !== password) {
            base = 0;
            password = pass;
            if (hasLowerCase(pass)) {
              base += 26;
            }
            if (hasUpperCase(pass)) {
              base += 26;
            }
            if (hasNumbers(pass)) {
              base += 10;
            }
            if (hasPunctuation(pass)) {
              base += 30;
            }
            H = Math.log2(Math.pow(base, pass.length));
            H = badPatterns(pass, H);
            if (H > 100) {
              H = 100;
            }
          }
        }
        return H;
      }
    };
  });

}).call(this);
